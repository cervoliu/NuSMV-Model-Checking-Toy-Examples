MODULE main

VAR
    arr : array 0..2 of -16..15;
    sum : -16..15;
    i : 0..3;
    state : {start, loop, end};
    overflow : boolean;

DEFINE
    temp := sum + arr[i];
ASSIGN
    init(i) := 0;
    init(sum) := 0;
    init(state) := start;
    init(overflow) := FALSE;

    next(state) := case
        state = start : loop;
        state = loop & i < 3 : loop;
        state = loop & i = 3 : end;
        TRUE : state;
    esac;

    init(arr[0]) := -16..15;
    init(arr[1]) := -16..15;
    init(arr[2]) := -16..15;

    next(arr[0]) := arr[0];
    next(arr[1]) := arr[1];
    next(arr[2]) := arr[2];

    next(sum) := case
        state = loop & i < 3 :
            (temp > 15 ? temp - 32 : (temp < -16 ? temp + 32 : temp));
        TRUE : sum;
    esac;

    next(i) := case
        state = loop & i < 3 : i + 1;
        TRUE : i;
    esac;

    next(overflow) := case
        overflow : TRUE;
        state = loop & i < 3 & (temp > 15 | temp < -16) : TRUE;
        TRUE : FALSE;
    esac;

CTLSPEC AG !overflow;

LTLSPEC G (!overflow & state = end -> sum = (arr[0] + arr[1] + arr[2]));

LTLSPEC G (state = end -> sum = (arr[0] + arr[1] + arr[2]));